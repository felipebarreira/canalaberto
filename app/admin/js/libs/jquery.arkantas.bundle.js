/* Arkantas Front - Desenvolvido por Coresphere Tecnologia Ltda – coresphe.re | Compilado em Fri Sep 13 2019 19:07:59 GMT-0300 (GMT-03:00)  */
/*!	

 */
var Arkantas = function () { function init() { loadModules() } function loadModules() { var modules = getModules(); for (var i in modules) Arkantas[modules[i]].init(), console.info("Arkantas: módulo [" + modules[i] + "] iniciado.") } function getModules() { var modules = [], register = ["form", "mask", "hide", "autohide", "sharer", "adma", "houdini"]; for (var i in register) $("[data-ark-" + register[i] + "]").each(function () { var module = register[i]; if (-1 === modules.indexOf(module)) return modules.push(module), !1 }); return modules } return { init: init } }(); $(document).ready(function () { Arkantas.init() }); var Arkantas = Arkantas || {}; Arkantas.adma = function () { function init() { scan() } function scan() { $(document).on("click", ".ark-adma__trigger button", function () { var $adma = ($(this), $(this).parents(".ark-adma")), molde = $adma.find(".ark-adma__scheme").last(); $adma.trigger("adma:beforeclone", [molde]); var clone = molde.clone(!0); molde.addClass("ark-adma__scheme--collapse"), $adma.find(".ark-adma__edit-area").slideUp(); var $container = $adma.find(".ark-adma__dispatch"), $clone = $("<div class='ark-adma__scheme'>" + clone.html() + "</div>"); $adma.trigger("adma:preadded", [$clone, molde]), $container.append($clone), Arkantas.mask.init(), $adma.trigger("adma:added", [$clone, molde]), $adma.addClass("has-ark-adma") }), $(document).on("click", ".ark-adma__edit button", function () { var $parent = $(this).parents(".ark-adma__scheme"); $(this).parents(".ark-adma"), $parent.find(".ark-adma__edit-area").slideDown(function () { $parent.removeClass("ark-adma__scheme--collapse") }) }), $(document).on("click", ".ark-adma__delete button", function () { var $parent = $(this).parents(".ark-adma__scheme"), $adma = $(this).parents(".ark-adma"); $parent.slideUp(function () { $parent.remove(); var $last = $adma.find(".ark-adma__scheme").last(); $last.removeClass("ark-adma__scheme--collapse"), $last.find(".ark-adma__edit-area").slideDown("fast"), $adma.trigger("adma:remove") }) }) } return { init: init, scan: scan } }(); var Arkantas = Arkantas || {}; Arkantas.form = function () { function init() { } return { init: init } }(); var Arkantas = Arkantas || {}; Arkantas.hide = function () { function init() { scan() } function scan() { var _els = $("[data-ark-hide]").not(".has-ark-hide"); _els.addClass("has-ark-hide"), hideMiniMsg(_els), hideDismiss(_els) } function hideMiniMsg(_els) { _els = _els.filter("[data-ark-hide~='mini-msg']"), _els.each(function (index) { var _el = $(this); _el.addClass("mini-msg-padding"), _el.append('<button title="Fechar" type="button" class="mini-msg__close">×</button>'); var tgt = _el.find(".mini-msg__close"); _el.some({ target: tgt }) }) } function hideDismiss(_els) { _els = _els.filter("[data-ark-hide~='dismiss']"), _els.each(function (index) { var _el = $(this); _el.addClass("mini-msg-padding"); var tgt = _el.find("[data-ark-hide-dismiss='target']"); _el.some({ target: tgt }) }) } return { init: init } }(), Arkantas.autohide = function () { function init() { scan() } function scan() { var _els = $("[data-ark-autohide]").not(".has-ark-auto-hide"); _els.addClass("has-ark-auto-hide"), autoHide(_els) } function autoHide(_els) { _els.each(function (index) { var _el = $(this), mili = _el.attr("data-ark-autohide"); _el.some({ time: mili }) }) } return { init: init } }(); var Arkantas = Arkantas || {}; Arkantas.houdini = function () { function init() { scan() } function scan() { var _els = $("[data-ark-houdini]").not(".has-ark-houdini"); _els.addClass("has-ark-houdini"), attachEvents(_els) } function attachEvents(_els) { _els.each(function (index) { const $trigger = $(this), checkTarget = $trigger.attr("data-ark-houdini-target"); if (checkTarget) { const $target = $("" + checkTarget); $trigger.on("click", function (ev) { ev.preventDefault(), parse($target, $trigger) }) } }) } function parse(target, trigger) { const $target = target, $trigger = trigger, visibility = checkVisibility($target), targetEffect = $trigger.attr("data-ark-houdini-effect"), openLabel = $trigger.find("span").attr("data-ark-houdini-openlabel"), closeLabel = $trigger.find("span").attr("data-ark-houdini-closelabel"); visibility ? ($trigger.addClass("--closed").removeClass("--opened"), openLabel && $trigger.find("span").html(openLabel), hide($target, targetEffect)) : ($trigger.addClass("--opened").removeClass("--closed"), closeLabel && $trigger.find("span").html(closeLabel), show($target, targetEffect)) } function checkVisibility(el) { return !!el.is(":visible") } function hide(el, targetEffect) { const effect = targetEffect || "slide"; var $el = el; "slide" == effect ? $el.slideUp(400, function () { $el.addClass("--close").removeClass("--open").trigger("houdini:hide") }) : "fade" == effect ? $el.fadeOut(400, function () { $el.addClass("--close").removeClass("--open").trigger("houdini:hide") }) : $el.hide(0, function () { $el.addClass("--close").removeClass("--open").trigger("houdini:hide") }) } function show(el, targetEffect) { const effect = targetEffect || "slide"; var $el = el; "slide" == effect ? $el.slideDown(400, function () { $el.addClass("--open").removeClass("--close").trigger("houdini:show") }) : "fade" == effect ? $el.fadeIn(400, function () { $el.addClass("--open").removeClass("--close").trigger("houdini:show") }) : $el.show(0, function () { $el.addClass("--open").removeClass("--close").trigger("houdini:show") }) } return { init: init, scan: scan } }(); var Arkantas = Arkantas || {}; Arkantas.mask = function () { function init() { masks(), factoryMasks() } function masks() { $("[data-ark-mask='cep']").mask("00000-000", { clearIfNotMatch: !0 }).addClass("has-mask"), $("[data-ark-mask='cel']").mask("(00) 0000-00009", { clearIfNotMatch: !0 }).addClass("has-mask"), $("[data-ark-mask='tel']").mask("(00) 0000-0000", { clearIfNotMatch: !0 }).addClass("has-mask"), $("[data-ark-mask='cpf']").mask("000.000.000-00", { reverse: !0, clearIfNotMatch: !0 }).addClass("has-mask"), $("[data-ark-mask='cnpj']").mask("00.000.000/0000-00", { reverse: !0, clearIfNotMatch: !0 }).addClass("has-mask"), $("[data-ark-mask='numericpoint']").mask("#.##0", { reverse: !0, maxlength: !1 }).addClass("has-mask"), $("[data-ark-mask='numeric']").mask("#0", { reverse: !0, maxlength: !1 }).addClass("has-mask"), $("[data-ark-mask='data']").mask("00/00/0000").addClass("has-mask"), $("[data-ark-mask='percent']").mask("##0,00%", { reverse: !0 }).addClass("has-mask"), $("[data-ark-mask='money']").not(".has-mask-money").each(function (index, element) { var _val = $(element).val(); _val ? $(element).maskMoney().maskMoney("mask", _val) : $(element).maskMoney(), $(element).addClass("has-mask-money") }) } function factoryMasks() { $("[data-ark-mask-factory]").each(function () { var pattern = $(this).attr("data-ark-mask-factory"); pattern = pattern.replace(/\'/gi, '"'), pattern = $.parseJSON(pattern), $(this).mask(pattern.mask, pattern.options) }) } return { init: init } }(); var Arkantas = Arkantas || {}; Arkantas.sharer = function () { function init() { scan() } function scan() { var _els = $("[data-ark-sharer]").not(".has-ark-sharer"); _els.addClass("has-ark-sharer"), sharer(_els) } function sharer(_els) { var width = 750, height = 550; _els.each(function (index) { var _el = $(this); _el.on("click", function (ev) { ev.preventDefault(); var title = encodeURIComponent(document.title), link = encodeURIComponent(window.location.href), source = $("h1").first().text(), url = _el.attr("href"); url = url.replace("[URL]", link), url = url.replace("[TITLE]", title), url = url.replace("[SOURCE]", source), window.open(url, "Compartilhar", "menubar=no,toolbar=no,resizable=yes,scrollbars=yes,width=" + width + ",height=" + height + ",top=" + (screen.height / 2 - height / 2) + ",left=" + (screen.width / 2 - width / 2)) }) }) } return { init: init, scan: scan } }(),/*!	
 *
 */
    /*! Some
     *  -----------------
     *  Faz com que elementos sumam dado determinado tempo, ou target click.
     */
    function ($) { function executeCallback(callback) { "function" == typeof callback && callback.call(this) } $.fn.some = function (options, callback) { var defaults = { target: null, time: null }, settings = $.extend({}, defaults, options); return this.each(function () { var _el = $(this); settings.time && setTimeout(function () { _el.slideUp(function () { executeCallback(callback) }) }, settings.time), settings.target && settings.target.on("click", function (event) { _el.slideUp("fast", function () { executeCallback(callback) }) }) }) } }(jQuery),/*! slideFadeToggle
 *  -----------------
 *  Faz com que elementos sumam dado determinado tempo, ou target click.
 */
    function ($) { $.fn.slideFadeToggle = function (speed, easing, callback) { return this.animate({ opacity: "toggle", height: "toggle" }, speed, easing, callback) } }(jQuery);